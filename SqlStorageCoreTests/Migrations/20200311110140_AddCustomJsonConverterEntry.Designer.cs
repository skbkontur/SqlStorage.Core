// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SkbKontur.SqlStorageCore;

namespace SkbKontur.SqlStorageCore.Tests.Migrations
{
    [DbContext(typeof(SqlDbContext))]
    [Migration("20200311110140_AddCustomJsonConverterEntry")]
    partial class AddCustomJsonConverterEntry
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("SkbKontur.SqlStorageCore.EventLog.SqlEventLogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("EntityContent")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModificationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Offset")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Offset")
                        .HasAnnotation("Npgsql:IndexMethod", "brin");

                    b.ToTable("SqlEventLogEntry");
                });

            modelBuilder.Entity("SkbKontur.SqlStorageCore.Tests.TestEntities.TestBatchStorageElement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TestBatchStorageElement");

                    b.HasAnnotation("SkbKontur.SqlStorageCore:EventLogTrigger", true);
                });

            modelBuilder.Entity("SkbKontur.SqlStorageCore.Tests.TestEntities.TestCustomJsonConverterSqlEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("CustomJsonColumn")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasDefaultValue("null");

                    b.HasKey("Id");

                    b.ToTable("TestCustomJsonConverterSqlEntity");

                    b.HasAnnotation("SkbKontur.SqlStorageCore:EventLogTrigger", true);
                });

            modelBuilder.Entity("SkbKontur.SqlStorageCore.Tests.TestEntities.TestJsonArrayColumnElement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ComplexArrayColumn")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasDefaultValue("null");

                    b.HasKey("Id");

                    b.ToTable("TestJsonArrayColumnElement");

                    b.HasAnnotation("SkbKontur.SqlStorageCore:EventLogTrigger", true);
                });

            modelBuilder.Entity("SkbKontur.SqlStorageCore.Tests.TestEntities.TestJsonColumnElement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ComplexColumn")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasDefaultValue("null");

                    b.HasKey("Id");

                    b.ToTable("TestJsonColumnElement");

                    b.HasAnnotation("SkbKontur.SqlStorageCore:EventLogTrigger", true);
                });

            modelBuilder.Entity("SkbKontur.SqlStorageCore.Tests.TestEntities.TestTimestampElement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TestTimestampElement");

                    b.HasAnnotation("SkbKontur.SqlStorageCore:EventLogTrigger", true);
                });

            modelBuilder.Entity("SkbKontur.SqlStorageCore.Tests.TestEntities.TestUpsertSqlEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("RequiredValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SomeId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SomeId2")
                        .HasColumnType("uuid");

                    b.Property<string>("StringValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SomeId1", "SomeId2")
                        .IsUnique();

                    b.ToTable("TestUpsertSqlEntry");

                    b.HasAnnotation("SkbKontur.SqlStorageCore:EventLogTrigger", true);
                });

            modelBuilder.Entity("SkbKontur.SqlStorageCore.Tests.TestEntities.TestValueTypedPropertiesStorageElement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool?>("BoolProperty")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DateTimeProperty")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IntProperty")
                        .HasColumnType("integer");

                    b.Property<string>("StringProperty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TestValueTypedPropertiesStorageElement");

                    b.HasAnnotation("SkbKontur.SqlStorageCore:EventLogTrigger", true);
                });
#pragma warning restore 612, 618
        }
    }
}
